#!/bin/bash

set -eu

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
ICON_DIR=$(cd "${SCRIPT_DIR}/../../"; pwd)



uenv_view_path="/user-environment/env/default/"

# Requirements
XML2_ROOT="${uenv_view_path}"
XML2_LIBS='-lxml2'

if [ -z "${SERIALBOX2_ROOT+x}" ]; then
    echo "Warning: SERIALBOX2_ROOT is not set, please use spack or set manually, if you intend to use serialization"
    SERIALBOX2_ROOT=''
    SERIALBOX2_LIBS=''
    SERIALBOXI=''
    SB2PP=''
else
    SERIALBOX2_LIBS='-lSerialboxFortran -lSerialboxC -lSerialboxCore'
    SERIALBOXI="-I${SERIALBOX2_ROOT}/include"
    SB2PP="python2 ${SERIALBOX2_ROOT}/python/pp_ser/pp_ser.py"
fi
if [ -z "${ECCODES_ROOT+x}" ]; then
    echo "Warning: ECCODES_ROOT is not set, please use spack or set manually if you intend to use ECCODES"
    ECCODES_ROOT=''
    ECCODES_LIBS=''
    ECCODESI=''
else
    ECCODES_LIBS='-leccodes'
    ECCODESI="-I${ECCODES_ROOT}/include"
fi

# Mandatory LIBS
BLAS_LAPACK_LIBS='-llapack -lblas'
NETCDF_LIBS='-lnetcdf -lnetcdff'
# The rest of libraries required by CUDA will be provided by PGI compiler:
STDCPP_LIBS='-c++libs'

################################################################################

BUILD_ENV="source ${uenv_view_path}/activate.sh; export NVFORTRAN_CONVERT_UPPERCASE=1;"
# We need some of the environment variables set by the modules now:
eval "$BUILD_ENV"

NETCDFFI="-I${uenv_view_path}/include"

CC='mpicc'
CFLAGS='-g -O2 -DNO_RTTOV'
CPPFLAGS="-I${uenv_view_path}/include/libxml2 -I${uenv_view_path}/include"
CXX='mpicxx'

FC='mpif90'
FCFLAGS="-g -traceback -O2 -Mrecursive -Mallocatable=03 -Mpreprocess -Mstack_arrays ${SERIALBOXI} ${ECCODESI} ${NETCDFFI} -D__SWAPDIM -DNO_RTTOV"
LDFLAGS="-L${uenv_view_path}/lib64 -L${uenv_view_path}/lib -nvmalloc"

FYAML_LIBS='-lfyaml'

# ICON executable will be linked to /opt/cray/pe/lib64/libmpichf90_pgi.so.3,
# which depends on libomptarget.so but doesn't have an RPATH to it. For this
# reason, it becomes impossible to run the executable without setting
# LD_LIBRARY_PATH in advance (e.g. by loading an environment module). To solve
# this issue, we overlink to libomptarget.so so that it can be found through
# RPATH entries of the executable, which are injected by the compiler.
LIBS="-Wl,--as-needed ${XML2_LIBS} ${BLAS_LAPACK_LIBS} ${SERIALBOX2_LIBS} ${FYAML_LIBS} ${STDCPP_LIBS} ${NETCDF_LIBS}"

CUDAARCHS='90'
NVCC='nvcc'
# -G seems to break the build, at least it does on tsa
NVCFLAGS='-ccbin mpic++ -g -O3 -arch=sm_90'
# gt4py NVCFLAGS need to be frozen, since -I/path/to/external/cub is added for NVCFLAGS in configure, which will break the build for gt4py.

MPI_LAUNCH=false

EXTRA_CONFIG_ARGS='--enable-atmo --enable-ocean --enable-coupling --enable-ecrad --disable-rte-rrtmgp --enable-jsbach'
EXTRA_CONFIG_ARGS+=' --enable-upatmo --enable-jsbach-hd --enable-les --disable-waves --disable-aes --disable-rttov --enable-yaxt'
EXTRA_CONFIG_ARGS+=' --disable-gpu --disable-cuda-graphs --disable-loop-exchange'
EXTRA_CONFIG_ARGS+=' --enable-mpi --disable-mpi-checks --disable-nccl'
EXTRA_CONFIG_ARGS+=' --disable-openmp'
EXTRA_CONFIG_ARGS+=' --enable-pgi-inlib --disable-mixed-precision --enable-realloc-buf --disable-vectorized-lrtm'
EXTRA_CONFIG_ARGS+=' --disable-parallel-netcdf --enable-async-io-rma --disable-serialization'
EXTRA_CONFIG_ARGS+=' --enable-silent-rules --enable-acm-license --disable-rpaths --disable-sct --disable-testbed'

################################################################################

"${ICON_DIR}/configure" \
BUILD_ENV="$BUILD_ENV" \
CC="$CC" \
CFLAGS="$CFLAGS" \
CPPFLAGS="$CPPFLAGS" \
CXX="$CXX" \
FC="$FC" \
CUDAARCHS="$CUDAARCHS" \
NVCFLAGS="$NVCFLAGS" \
FCFLAGS="$FCFLAGS" \
LDFLAGS="$LDFLAGS" \
LIBS="$LIBS" \
MPI_LAUNCH="$MPI_LAUNCH" \
SB2PP="$SB2PP" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${ICON_DIR}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*'
  ln -sf -t run/ ${ICON_DIR}/run/standard_*
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
  ln -sf ${ICON_DIR}/vertical_coord_tables
fi
